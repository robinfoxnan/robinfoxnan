// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pathloss.proto

#include "pathloss.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_pathloss_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_job_result_t_link_result_t_pathloss_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pathloss_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_req_job_t_link_info_t_pathloss_2eproto;
namespace pathloss {
class req_job_t_link_info_tDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<req_job_t_link_info_t> _instance;
} _req_job_t_link_info_t_default_instance_;
class req_job_tDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<req_job_t> _instance;
} _req_job_t_default_instance_;
class job_result_t_link_result_tDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<job_result_t_link_result_t> _instance;
} _job_result_t_link_result_t_default_instance_;
class job_result_tDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<job_result_t> _instance;
} _job_result_t_default_instance_;
}  // namespace pathloss
static void InitDefaultsscc_info_job_result_t_pathloss_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pathloss::_job_result_t_default_instance_;
    new (ptr) ::pathloss::job_result_t();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_job_result_t_pathloss_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_job_result_t_pathloss_2eproto}, {
      &scc_info_job_result_t_link_result_t_pathloss_2eproto.base,}};

static void InitDefaultsscc_info_job_result_t_link_result_t_pathloss_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pathloss::_job_result_t_link_result_t_default_instance_;
    new (ptr) ::pathloss::job_result_t_link_result_t();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_job_result_t_link_result_t_pathloss_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_job_result_t_link_result_t_pathloss_2eproto}, {}};

static void InitDefaultsscc_info_req_job_t_pathloss_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pathloss::_req_job_t_default_instance_;
    new (ptr) ::pathloss::req_job_t();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_req_job_t_pathloss_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_req_job_t_pathloss_2eproto}, {
      &scc_info_req_job_t_link_info_t_pathloss_2eproto.base,}};

static void InitDefaultsscc_info_req_job_t_link_info_t_pathloss_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pathloss::_req_job_t_link_info_t_default_instance_;
    new (ptr) ::pathloss::req_job_t_link_info_t();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_req_job_t_link_info_t_pathloss_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_req_job_t_link_info_t_pathloss_2eproto}, {}};

namespace pathloss {

// ===================================================================

class req_job_t_link_info_t::_Internal {
 public:
};

req_job_t_link_info_t::req_job_t_link_info_t(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pathloss.req_job_t.link_info_t)
}
req_job_t_link_info_t::req_job_t_link_info_t(const req_job_t_link_info_t& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&lat_, &from.lat_,
    static_cast<size_t>(reinterpret_cast<char*>(&link_idx_) -
    reinterpret_cast<char*>(&lat_)) + sizeof(link_idx_));
  // @@protoc_insertion_point(copy_constructor:pathloss.req_job_t.link_info_t)
}

void req_job_t_link_info_t::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&lat_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&link_idx_) -
      reinterpret_cast<char*>(&lat_)) + sizeof(link_idx_));
}

req_job_t_link_info_t::~req_job_t_link_info_t() {
  // @@protoc_insertion_point(destructor:pathloss.req_job_t.link_info_t)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void req_job_t_link_info_t::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void req_job_t_link_info_t::ArenaDtor(void* object) {
  req_job_t_link_info_t* _this = reinterpret_cast< req_job_t_link_info_t* >(object);
  (void)_this;
}
void req_job_t_link_info_t::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void req_job_t_link_info_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const req_job_t_link_info_t& req_job_t_link_info_t::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_req_job_t_link_info_t_pathloss_2eproto.base);
  return *internal_default_instance();
}


void req_job_t_link_info_t::Clear() {
// @@protoc_insertion_point(message_clear_start:pathloss.req_job_t.link_info_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&lat_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&link_idx_) -
      reinterpret_cast<char*>(&lat_)) + sizeof(link_idx_));
  _internal_metadata_.Clear<std::string>();
}

const char* req_job_t_link_info_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 link_idx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          link_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double lat = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          lat_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double lon = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          lon_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double alt = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          alt_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double freq = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          freq_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* req_job_t_link_info_t::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pathloss.req_job_t.link_info_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 link_idx = 1;
  if (this->link_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_link_idx(), target);
  }

  // double lat = 2;
  if (!(this->lat() <= 0 && this->lat() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_lat(), target);
  }

  // double lon = 3;
  if (!(this->lon() <= 0 && this->lon() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_lon(), target);
  }

  // double alt = 4;
  if (!(this->alt() <= 0 && this->alt() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_alt(), target);
  }

  // double freq = 5;
  if (!(this->freq() <= 0 && this->freq() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_freq(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pathloss.req_job_t.link_info_t)
  return target;
}

size_t req_job_t_link_info_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pathloss.req_job_t.link_info_t)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double lat = 2;
  if (!(this->lat() <= 0 && this->lat() >= 0)) {
    total_size += 1 + 8;
  }

  // double lon = 3;
  if (!(this->lon() <= 0 && this->lon() >= 0)) {
    total_size += 1 + 8;
  }

  // double alt = 4;
  if (!(this->alt() <= 0 && this->alt() >= 0)) {
    total_size += 1 + 8;
  }

  // double freq = 5;
  if (!(this->freq() <= 0 && this->freq() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 link_idx = 1;
  if (this->link_idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_link_idx());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void req_job_t_link_info_t::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const req_job_t_link_info_t*>(
      &from));
}

void req_job_t_link_info_t::MergeFrom(const req_job_t_link_info_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pathloss.req_job_t.link_info_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.lat() <= 0 && from.lat() >= 0)) {
    _internal_set_lat(from._internal_lat());
  }
  if (!(from.lon() <= 0 && from.lon() >= 0)) {
    _internal_set_lon(from._internal_lon());
  }
  if (!(from.alt() <= 0 && from.alt() >= 0)) {
    _internal_set_alt(from._internal_alt());
  }
  if (!(from.freq() <= 0 && from.freq() >= 0)) {
    _internal_set_freq(from._internal_freq());
  }
  if (from.link_idx() != 0) {
    _internal_set_link_idx(from._internal_link_idx());
  }
}

void req_job_t_link_info_t::CopyFrom(const req_job_t_link_info_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pathloss.req_job_t.link_info_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool req_job_t_link_info_t::IsInitialized() const {
  return true;
}

void req_job_t_link_info_t::InternalSwap(req_job_t_link_info_t* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(req_job_t_link_info_t, link_idx_)
      + sizeof(req_job_t_link_info_t::link_idx_)
      - PROTOBUF_FIELD_OFFSET(req_job_t_link_info_t, lat_)>(
          reinterpret_cast<char*>(&lat_),
          reinterpret_cast<char*>(&other->lat_));
}

std::string req_job_t_link_info_t::GetTypeName() const {
  return "pathloss.req_job_t.link_info_t";
}


// ===================================================================

class req_job_t::_Internal {
 public:
};

req_job_t::req_job_t(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena),
  links_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pathloss.req_job_t)
}
req_job_t::req_job_t(const req_job_t& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      links_(from.links_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  job_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_job_id().empty()) {
    job_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_job_id(), 
      GetArena());
  }
  time_str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_time_str().empty()) {
    time_str_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_time_str(), 
      GetArena());
  }
  ::memcpy(&time_sec_, &from.time_sec_,
    static_cast<size_t>(reinterpret_cast<char*>(&time_msec_) -
    reinterpret_cast<char*>(&time_sec_)) + sizeof(time_msec_));
  // @@protoc_insertion_point(copy_constructor:pathloss.req_job_t)
}

void req_job_t::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_req_job_t_pathloss_2eproto.base);
  job_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  time_str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&time_sec_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&time_msec_) -
      reinterpret_cast<char*>(&time_sec_)) + sizeof(time_msec_));
}

req_job_t::~req_job_t() {
  // @@protoc_insertion_point(destructor:pathloss.req_job_t)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void req_job_t::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  job_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  time_str_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void req_job_t::ArenaDtor(void* object) {
  req_job_t* _this = reinterpret_cast< req_job_t* >(object);
  (void)_this;
}
void req_job_t::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void req_job_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const req_job_t& req_job_t::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_req_job_t_pathloss_2eproto.base);
  return *internal_default_instance();
}


void req_job_t::Clear() {
// @@protoc_insertion_point(message_clear_start:pathloss.req_job_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  links_.Clear();
  job_id_.ClearToEmpty();
  time_str_.ClearToEmpty();
  ::memset(&time_sec_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_msec_) -
      reinterpret_cast<char*>(&time_sec_)) + sizeof(time_msec_));
  _internal_metadata_.Clear<std::string>();
}

const char* req_job_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string job_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_job_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string time_str = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_time_str();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 time_sec = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          time_sec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 time_msec = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          time_msec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .pathloss.req_job_t.link_info_t links = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_links(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* req_job_t::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pathloss.req_job_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string job_id = 1;
  if (this->job_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_job_id().data(), static_cast<int>(this->_internal_job_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pathloss.req_job_t.job_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_job_id(), target);
  }

  // string time_str = 2;
  if (this->time_str().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_time_str().data(), static_cast<int>(this->_internal_time_str().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pathloss.req_job_t.time_str");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_time_str(), target);
  }

  // uint64 time_sec = 3;
  if (this->time_sec() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_time_sec(), target);
  }

  // uint32 time_msec = 4;
  if (this->time_msec() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_time_msec(), target);
  }

  // repeated .pathloss.req_job_t.link_info_t links = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_links_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_links(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pathloss.req_job_t)
  return target;
}

size_t req_job_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pathloss.req_job_t)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pathloss.req_job_t.link_info_t links = 5;
  total_size += 1UL * this->_internal_links_size();
  for (const auto& msg : this->links_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string job_id = 1;
  if (this->job_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_job_id());
  }

  // string time_str = 2;
  if (this->time_str().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_time_str());
  }

  // uint64 time_sec = 3;
  if (this->time_sec() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_time_sec());
  }

  // uint32 time_msec = 4;
  if (this->time_msec() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_time_msec());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void req_job_t::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const req_job_t*>(
      &from));
}

void req_job_t::MergeFrom(const req_job_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pathloss.req_job_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  links_.MergeFrom(from.links_);
  if (from.job_id().size() > 0) {
    _internal_set_job_id(from._internal_job_id());
  }
  if (from.time_str().size() > 0) {
    _internal_set_time_str(from._internal_time_str());
  }
  if (from.time_sec() != 0) {
    _internal_set_time_sec(from._internal_time_sec());
  }
  if (from.time_msec() != 0) {
    _internal_set_time_msec(from._internal_time_msec());
  }
}

void req_job_t::CopyFrom(const req_job_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pathloss.req_job_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool req_job_t::IsInitialized() const {
  return true;
}

void req_job_t::InternalSwap(req_job_t* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  links_.InternalSwap(&other->links_);
  job_id_.Swap(&other->job_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  time_str_.Swap(&other->time_str_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(req_job_t, time_msec_)
      + sizeof(req_job_t::time_msec_)
      - PROTOBUF_FIELD_OFFSET(req_job_t, time_sec_)>(
          reinterpret_cast<char*>(&time_sec_),
          reinterpret_cast<char*>(&other->time_sec_));
}

std::string req_job_t::GetTypeName() const {
  return "pathloss.req_job_t";
}


// ===================================================================

class job_result_t_link_result_t::_Internal {
 public:
};

job_result_t_link_result_t::job_result_t_link_result_t(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pathloss.job_result_t.link_result_t)
}
job_result_t_link_result_t::job_result_t_link_result_t(const job_result_t_link_result_t& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&loss_db_, &from.loss_db_,
    static_cast<size_t>(reinterpret_cast<char*>(&link_idx_) -
    reinterpret_cast<char*>(&loss_db_)) + sizeof(link_idx_));
  // @@protoc_insertion_point(copy_constructor:pathloss.job_result_t.link_result_t)
}

void job_result_t_link_result_t::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&loss_db_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&link_idx_) -
      reinterpret_cast<char*>(&loss_db_)) + sizeof(link_idx_));
}

job_result_t_link_result_t::~job_result_t_link_result_t() {
  // @@protoc_insertion_point(destructor:pathloss.job_result_t.link_result_t)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void job_result_t_link_result_t::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void job_result_t_link_result_t::ArenaDtor(void* object) {
  job_result_t_link_result_t* _this = reinterpret_cast< job_result_t_link_result_t* >(object);
  (void)_this;
}
void job_result_t_link_result_t::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void job_result_t_link_result_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const job_result_t_link_result_t& job_result_t_link_result_t::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_job_result_t_link_result_t_pathloss_2eproto.base);
  return *internal_default_instance();
}


void job_result_t_link_result_t::Clear() {
// @@protoc_insertion_point(message_clear_start:pathloss.job_result_t.link_result_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&loss_db_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&link_idx_) -
      reinterpret_cast<char*>(&loss_db_)) + sizeof(link_idx_));
  _internal_metadata_.Clear<std::string>();
}

const char* job_result_t_link_result_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 link_idx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          link_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double loss_db = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          loss_db_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* job_result_t_link_result_t::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pathloss.job_result_t.link_result_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 link_idx = 1;
  if (this->link_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_link_idx(), target);
  }

  // double loss_db = 2;
  if (!(this->loss_db() <= 0 && this->loss_db() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_loss_db(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pathloss.job_result_t.link_result_t)
  return target;
}

size_t job_result_t_link_result_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pathloss.job_result_t.link_result_t)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double loss_db = 2;
  if (!(this->loss_db() <= 0 && this->loss_db() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 link_idx = 1;
  if (this->link_idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_link_idx());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void job_result_t_link_result_t::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const job_result_t_link_result_t*>(
      &from));
}

void job_result_t_link_result_t::MergeFrom(const job_result_t_link_result_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pathloss.job_result_t.link_result_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.loss_db() <= 0 && from.loss_db() >= 0)) {
    _internal_set_loss_db(from._internal_loss_db());
  }
  if (from.link_idx() != 0) {
    _internal_set_link_idx(from._internal_link_idx());
  }
}

void job_result_t_link_result_t::CopyFrom(const job_result_t_link_result_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pathloss.job_result_t.link_result_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool job_result_t_link_result_t::IsInitialized() const {
  return true;
}

void job_result_t_link_result_t::InternalSwap(job_result_t_link_result_t* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(job_result_t_link_result_t, link_idx_)
      + sizeof(job_result_t_link_result_t::link_idx_)
      - PROTOBUF_FIELD_OFFSET(job_result_t_link_result_t, loss_db_)>(
          reinterpret_cast<char*>(&loss_db_),
          reinterpret_cast<char*>(&other->loss_db_));
}

std::string job_result_t_link_result_t::GetTypeName() const {
  return "pathloss.job_result_t.link_result_t";
}


// ===================================================================

class job_result_t::_Internal {
 public:
};

job_result_t::job_result_t(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena),
  link_results_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pathloss.job_result_t)
}
job_result_t::job_result_t(const job_result_t& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      link_results_(from.link_results_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  job_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_job_id().empty()) {
    job_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_job_id(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:pathloss.job_result_t)
}

void job_result_t::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_job_result_t_pathloss_2eproto.base);
  job_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

job_result_t::~job_result_t() {
  // @@protoc_insertion_point(destructor:pathloss.job_result_t)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void job_result_t::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  job_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void job_result_t::ArenaDtor(void* object) {
  job_result_t* _this = reinterpret_cast< job_result_t* >(object);
  (void)_this;
}
void job_result_t::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void job_result_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const job_result_t& job_result_t::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_job_result_t_pathloss_2eproto.base);
  return *internal_default_instance();
}


void job_result_t::Clear() {
// @@protoc_insertion_point(message_clear_start:pathloss.job_result_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  link_results_.Clear();
  job_id_.ClearToEmpty();
  _internal_metadata_.Clear<std::string>();
}

const char* job_result_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string job_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_job_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .pathloss.job_result_t.link_result_t link_results = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_link_results(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* job_result_t::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pathloss.job_result_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string job_id = 1;
  if (this->job_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_job_id().data(), static_cast<int>(this->_internal_job_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pathloss.job_result_t.job_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_job_id(), target);
  }

  // repeated .pathloss.job_result_t.link_result_t link_results = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_link_results_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_link_results(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pathloss.job_result_t)
  return target;
}

size_t job_result_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pathloss.job_result_t)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pathloss.job_result_t.link_result_t link_results = 2;
  total_size += 1UL * this->_internal_link_results_size();
  for (const auto& msg : this->link_results_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string job_id = 1;
  if (this->job_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_job_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void job_result_t::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const job_result_t*>(
      &from));
}

void job_result_t::MergeFrom(const job_result_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pathloss.job_result_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  link_results_.MergeFrom(from.link_results_);
  if (from.job_id().size() > 0) {
    _internal_set_job_id(from._internal_job_id());
  }
}

void job_result_t::CopyFrom(const job_result_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pathloss.job_result_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool job_result_t::IsInitialized() const {
  return true;
}

void job_result_t::InternalSwap(job_result_t* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  link_results_.InternalSwap(&other->link_results_);
  job_id_.Swap(&other->job_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

std::string job_result_t::GetTypeName() const {
  return "pathloss.job_result_t";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace pathloss
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pathloss::req_job_t_link_info_t* Arena::CreateMaybeMessage< ::pathloss::req_job_t_link_info_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pathloss::req_job_t_link_info_t >(arena);
}
template<> PROTOBUF_NOINLINE ::pathloss::req_job_t* Arena::CreateMaybeMessage< ::pathloss::req_job_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pathloss::req_job_t >(arena);
}
template<> PROTOBUF_NOINLINE ::pathloss::job_result_t_link_result_t* Arena::CreateMaybeMessage< ::pathloss::job_result_t_link_result_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pathloss::job_result_t_link_result_t >(arena);
}
template<> PROTOBUF_NOINLINE ::pathloss::job_result_t* Arena::CreateMaybeMessage< ::pathloss::job_result_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pathloss::job_result_t >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
