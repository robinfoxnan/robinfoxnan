// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pathloss.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_pathloss_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_pathloss_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_pathloss_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_pathloss_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace pathloss {
class job_result_t;
class job_result_tDefaultTypeInternal;
extern job_result_tDefaultTypeInternal _job_result_t_default_instance_;
class job_result_t_link_result_t;
class job_result_t_link_result_tDefaultTypeInternal;
extern job_result_t_link_result_tDefaultTypeInternal _job_result_t_link_result_t_default_instance_;
class req_job_t;
class req_job_tDefaultTypeInternal;
extern req_job_tDefaultTypeInternal _req_job_t_default_instance_;
class req_job_t_link_info_t;
class req_job_t_link_info_tDefaultTypeInternal;
extern req_job_t_link_info_tDefaultTypeInternal _req_job_t_link_info_t_default_instance_;
}  // namespace pathloss
PROTOBUF_NAMESPACE_OPEN
template<> ::pathloss::job_result_t* Arena::CreateMaybeMessage<::pathloss::job_result_t>(Arena*);
template<> ::pathloss::job_result_t_link_result_t* Arena::CreateMaybeMessage<::pathloss::job_result_t_link_result_t>(Arena*);
template<> ::pathloss::req_job_t* Arena::CreateMaybeMessage<::pathloss::req_job_t>(Arena*);
template<> ::pathloss::req_job_t_link_info_t* Arena::CreateMaybeMessage<::pathloss::req_job_t_link_info_t>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pathloss {

// ===================================================================

class req_job_t_link_info_t PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:pathloss.req_job_t.link_info_t) */ {
 public:
  inline req_job_t_link_info_t() : req_job_t_link_info_t(nullptr) {}
  virtual ~req_job_t_link_info_t();

  req_job_t_link_info_t(const req_job_t_link_info_t& from);
  req_job_t_link_info_t(req_job_t_link_info_t&& from) noexcept
    : req_job_t_link_info_t() {
    *this = ::std::move(from);
  }

  inline req_job_t_link_info_t& operator=(const req_job_t_link_info_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline req_job_t_link_info_t& operator=(req_job_t_link_info_t&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const req_job_t_link_info_t& default_instance();

  static inline const req_job_t_link_info_t* internal_default_instance() {
    return reinterpret_cast<const req_job_t_link_info_t*>(
               &_req_job_t_link_info_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(req_job_t_link_info_t& a, req_job_t_link_info_t& b) {
    a.Swap(&b);
  }
  inline void Swap(req_job_t_link_info_t* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(req_job_t_link_info_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline req_job_t_link_info_t* New() const final {
    return CreateMaybeMessage<req_job_t_link_info_t>(nullptr);
  }

  req_job_t_link_info_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<req_job_t_link_info_t>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const req_job_t_link_info_t& from);
  void MergeFrom(const req_job_t_link_info_t& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(req_job_t_link_info_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pathloss.req_job_t.link_info_t";
  }
  protected:
  explicit req_job_t_link_info_t(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLatFieldNumber = 2,
    kLonFieldNumber = 3,
    kAltFieldNumber = 4,
    kFreqFieldNumber = 5,
    kLinkIdxFieldNumber = 1,
  };
  // double lat = 2;
  void clear_lat();
  double lat() const;
  void set_lat(double value);
  private:
  double _internal_lat() const;
  void _internal_set_lat(double value);
  public:

  // double lon = 3;
  void clear_lon();
  double lon() const;
  void set_lon(double value);
  private:
  double _internal_lon() const;
  void _internal_set_lon(double value);
  public:

  // double alt = 4;
  void clear_alt();
  double alt() const;
  void set_alt(double value);
  private:
  double _internal_alt() const;
  void _internal_set_alt(double value);
  public:

  // double freq = 5;
  void clear_freq();
  double freq() const;
  void set_freq(double value);
  private:
  double _internal_freq() const;
  void _internal_set_freq(double value);
  public:

  // int32 link_idx = 1;
  void clear_link_idx();
  ::PROTOBUF_NAMESPACE_ID::int32 link_idx() const;
  void set_link_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_link_idx() const;
  void _internal_set_link_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pathloss.req_job_t.link_info_t)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double lat_;
  double lon_;
  double alt_;
  double freq_;
  ::PROTOBUF_NAMESPACE_ID::int32 link_idx_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pathloss_2eproto;
};
// -------------------------------------------------------------------

class req_job_t PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:pathloss.req_job_t) */ {
 public:
  inline req_job_t() : req_job_t(nullptr) {}
  virtual ~req_job_t();

  req_job_t(const req_job_t& from);
  req_job_t(req_job_t&& from) noexcept
    : req_job_t() {
    *this = ::std::move(from);
  }

  inline req_job_t& operator=(const req_job_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline req_job_t& operator=(req_job_t&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const req_job_t& default_instance();

  static inline const req_job_t* internal_default_instance() {
    return reinterpret_cast<const req_job_t*>(
               &_req_job_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(req_job_t& a, req_job_t& b) {
    a.Swap(&b);
  }
  inline void Swap(req_job_t* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(req_job_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline req_job_t* New() const final {
    return CreateMaybeMessage<req_job_t>(nullptr);
  }

  req_job_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<req_job_t>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const req_job_t& from);
  void MergeFrom(const req_job_t& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(req_job_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pathloss.req_job_t";
  }
  protected:
  explicit req_job_t(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef req_job_t_link_info_t link_info_t;

  // accessors -------------------------------------------------------

  enum : int {
    kLinksFieldNumber = 3,
    kJobIdFieldNumber = 1,
    kTimeStrFieldNumber = 2,
  };
  // repeated .pathloss.req_job_t.link_info_t links = 3;
  int links_size() const;
  private:
  int _internal_links_size() const;
  public:
  void clear_links();
  ::pathloss::req_job_t_link_info_t* mutable_links(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pathloss::req_job_t_link_info_t >*
      mutable_links();
  private:
  const ::pathloss::req_job_t_link_info_t& _internal_links(int index) const;
  ::pathloss::req_job_t_link_info_t* _internal_add_links();
  public:
  const ::pathloss::req_job_t_link_info_t& links(int index) const;
  ::pathloss::req_job_t_link_info_t* add_links();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pathloss::req_job_t_link_info_t >&
      links() const;

  // string job_id = 1;
  void clear_job_id();
  const std::string& job_id() const;
  void set_job_id(const std::string& value);
  void set_job_id(std::string&& value);
  void set_job_id(const char* value);
  void set_job_id(const char* value, size_t size);
  std::string* mutable_job_id();
  std::string* release_job_id();
  void set_allocated_job_id(std::string* job_id);
  private:
  const std::string& _internal_job_id() const;
  void _internal_set_job_id(const std::string& value);
  std::string* _internal_mutable_job_id();
  public:

  // string time_str = 2;
  void clear_time_str();
  const std::string& time_str() const;
  void set_time_str(const std::string& value);
  void set_time_str(std::string&& value);
  void set_time_str(const char* value);
  void set_time_str(const char* value, size_t size);
  std::string* mutable_time_str();
  std::string* release_time_str();
  void set_allocated_time_str(std::string* time_str);
  private:
  const std::string& _internal_time_str() const;
  void _internal_set_time_str(const std::string& value);
  std::string* _internal_mutable_time_str();
  public:

  // @@protoc_insertion_point(class_scope:pathloss.req_job_t)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pathloss::req_job_t_link_info_t > links_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr job_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr time_str_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pathloss_2eproto;
};
// -------------------------------------------------------------------

class job_result_t_link_result_t PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:pathloss.job_result_t.link_result_t) */ {
 public:
  inline job_result_t_link_result_t() : job_result_t_link_result_t(nullptr) {}
  virtual ~job_result_t_link_result_t();

  job_result_t_link_result_t(const job_result_t_link_result_t& from);
  job_result_t_link_result_t(job_result_t_link_result_t&& from) noexcept
    : job_result_t_link_result_t() {
    *this = ::std::move(from);
  }

  inline job_result_t_link_result_t& operator=(const job_result_t_link_result_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline job_result_t_link_result_t& operator=(job_result_t_link_result_t&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const job_result_t_link_result_t& default_instance();

  static inline const job_result_t_link_result_t* internal_default_instance() {
    return reinterpret_cast<const job_result_t_link_result_t*>(
               &_job_result_t_link_result_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(job_result_t_link_result_t& a, job_result_t_link_result_t& b) {
    a.Swap(&b);
  }
  inline void Swap(job_result_t_link_result_t* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(job_result_t_link_result_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline job_result_t_link_result_t* New() const final {
    return CreateMaybeMessage<job_result_t_link_result_t>(nullptr);
  }

  job_result_t_link_result_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<job_result_t_link_result_t>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const job_result_t_link_result_t& from);
  void MergeFrom(const job_result_t_link_result_t& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(job_result_t_link_result_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pathloss.job_result_t.link_result_t";
  }
  protected:
  explicit job_result_t_link_result_t(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLossDbFieldNumber = 2,
    kLinkIdxFieldNumber = 1,
  };
  // double loss_db = 2;
  void clear_loss_db();
  double loss_db() const;
  void set_loss_db(double value);
  private:
  double _internal_loss_db() const;
  void _internal_set_loss_db(double value);
  public:

  // int32 link_idx = 1;
  void clear_link_idx();
  ::PROTOBUF_NAMESPACE_ID::int32 link_idx() const;
  void set_link_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_link_idx() const;
  void _internal_set_link_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pathloss.job_result_t.link_result_t)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double loss_db_;
  ::PROTOBUF_NAMESPACE_ID::int32 link_idx_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pathloss_2eproto;
};
// -------------------------------------------------------------------

class job_result_t PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:pathloss.job_result_t) */ {
 public:
  inline job_result_t() : job_result_t(nullptr) {}
  virtual ~job_result_t();

  job_result_t(const job_result_t& from);
  job_result_t(job_result_t&& from) noexcept
    : job_result_t() {
    *this = ::std::move(from);
  }

  inline job_result_t& operator=(const job_result_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline job_result_t& operator=(job_result_t&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const job_result_t& default_instance();

  static inline const job_result_t* internal_default_instance() {
    return reinterpret_cast<const job_result_t*>(
               &_job_result_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(job_result_t& a, job_result_t& b) {
    a.Swap(&b);
  }
  inline void Swap(job_result_t* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(job_result_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline job_result_t* New() const final {
    return CreateMaybeMessage<job_result_t>(nullptr);
  }

  job_result_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<job_result_t>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const job_result_t& from);
  void MergeFrom(const job_result_t& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(job_result_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pathloss.job_result_t";
  }
  protected:
  explicit job_result_t(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef job_result_t_link_result_t link_result_t;

  // accessors -------------------------------------------------------

  enum : int {
    kLinkResultsFieldNumber = 2,
    kJobIdFieldNumber = 1,
  };
  // repeated .pathloss.job_result_t.link_result_t link_results = 2;
  int link_results_size() const;
  private:
  int _internal_link_results_size() const;
  public:
  void clear_link_results();
  ::pathloss::job_result_t_link_result_t* mutable_link_results(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pathloss::job_result_t_link_result_t >*
      mutable_link_results();
  private:
  const ::pathloss::job_result_t_link_result_t& _internal_link_results(int index) const;
  ::pathloss::job_result_t_link_result_t* _internal_add_link_results();
  public:
  const ::pathloss::job_result_t_link_result_t& link_results(int index) const;
  ::pathloss::job_result_t_link_result_t* add_link_results();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pathloss::job_result_t_link_result_t >&
      link_results() const;

  // string job_id = 1;
  void clear_job_id();
  const std::string& job_id() const;
  void set_job_id(const std::string& value);
  void set_job_id(std::string&& value);
  void set_job_id(const char* value);
  void set_job_id(const char* value, size_t size);
  std::string* mutable_job_id();
  std::string* release_job_id();
  void set_allocated_job_id(std::string* job_id);
  private:
  const std::string& _internal_job_id() const;
  void _internal_set_job_id(const std::string& value);
  std::string* _internal_mutable_job_id();
  public:

  // @@protoc_insertion_point(class_scope:pathloss.job_result_t)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pathloss::job_result_t_link_result_t > link_results_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr job_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pathloss_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// req_job_t_link_info_t

// int32 link_idx = 1;
inline void req_job_t_link_info_t::clear_link_idx() {
  link_idx_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 req_job_t_link_info_t::_internal_link_idx() const {
  return link_idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 req_job_t_link_info_t::link_idx() const {
  // @@protoc_insertion_point(field_get:pathloss.req_job_t.link_info_t.link_idx)
  return _internal_link_idx();
}
inline void req_job_t_link_info_t::_internal_set_link_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  link_idx_ = value;
}
inline void req_job_t_link_info_t::set_link_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_link_idx(value);
  // @@protoc_insertion_point(field_set:pathloss.req_job_t.link_info_t.link_idx)
}

// double lat = 2;
inline void req_job_t_link_info_t::clear_lat() {
  lat_ = 0;
}
inline double req_job_t_link_info_t::_internal_lat() const {
  return lat_;
}
inline double req_job_t_link_info_t::lat() const {
  // @@protoc_insertion_point(field_get:pathloss.req_job_t.link_info_t.lat)
  return _internal_lat();
}
inline void req_job_t_link_info_t::_internal_set_lat(double value) {
  
  lat_ = value;
}
inline void req_job_t_link_info_t::set_lat(double value) {
  _internal_set_lat(value);
  // @@protoc_insertion_point(field_set:pathloss.req_job_t.link_info_t.lat)
}

// double lon = 3;
inline void req_job_t_link_info_t::clear_lon() {
  lon_ = 0;
}
inline double req_job_t_link_info_t::_internal_lon() const {
  return lon_;
}
inline double req_job_t_link_info_t::lon() const {
  // @@protoc_insertion_point(field_get:pathloss.req_job_t.link_info_t.lon)
  return _internal_lon();
}
inline void req_job_t_link_info_t::_internal_set_lon(double value) {
  
  lon_ = value;
}
inline void req_job_t_link_info_t::set_lon(double value) {
  _internal_set_lon(value);
  // @@protoc_insertion_point(field_set:pathloss.req_job_t.link_info_t.lon)
}

// double alt = 4;
inline void req_job_t_link_info_t::clear_alt() {
  alt_ = 0;
}
inline double req_job_t_link_info_t::_internal_alt() const {
  return alt_;
}
inline double req_job_t_link_info_t::alt() const {
  // @@protoc_insertion_point(field_get:pathloss.req_job_t.link_info_t.alt)
  return _internal_alt();
}
inline void req_job_t_link_info_t::_internal_set_alt(double value) {
  
  alt_ = value;
}
inline void req_job_t_link_info_t::set_alt(double value) {
  _internal_set_alt(value);
  // @@protoc_insertion_point(field_set:pathloss.req_job_t.link_info_t.alt)
}

// double freq = 5;
inline void req_job_t_link_info_t::clear_freq() {
  freq_ = 0;
}
inline double req_job_t_link_info_t::_internal_freq() const {
  return freq_;
}
inline double req_job_t_link_info_t::freq() const {
  // @@protoc_insertion_point(field_get:pathloss.req_job_t.link_info_t.freq)
  return _internal_freq();
}
inline void req_job_t_link_info_t::_internal_set_freq(double value) {
  
  freq_ = value;
}
inline void req_job_t_link_info_t::set_freq(double value) {
  _internal_set_freq(value);
  // @@protoc_insertion_point(field_set:pathloss.req_job_t.link_info_t.freq)
}

// -------------------------------------------------------------------

// req_job_t

// string job_id = 1;
inline void req_job_t::clear_job_id() {
  job_id_.ClearToEmpty();
}
inline const std::string& req_job_t::job_id() const {
  // @@protoc_insertion_point(field_get:pathloss.req_job_t.job_id)
  return _internal_job_id();
}
inline void req_job_t::set_job_id(const std::string& value) {
  _internal_set_job_id(value);
  // @@protoc_insertion_point(field_set:pathloss.req_job_t.job_id)
}
inline std::string* req_job_t::mutable_job_id() {
  // @@protoc_insertion_point(field_mutable:pathloss.req_job_t.job_id)
  return _internal_mutable_job_id();
}
inline const std::string& req_job_t::_internal_job_id() const {
  return job_id_.Get();
}
inline void req_job_t::_internal_set_job_id(const std::string& value) {
  
  job_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void req_job_t::set_job_id(std::string&& value) {
  
  job_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pathloss.req_job_t.job_id)
}
inline void req_job_t::set_job_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  job_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:pathloss.req_job_t.job_id)
}
inline void req_job_t::set_job_id(const char* value,
    size_t size) {
  
  job_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pathloss.req_job_t.job_id)
}
inline std::string* req_job_t::_internal_mutable_job_id() {
  
  return job_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* req_job_t::release_job_id() {
  // @@protoc_insertion_point(field_release:pathloss.req_job_t.job_id)
  return job_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void req_job_t::set_allocated_job_id(std::string* job_id) {
  if (job_id != nullptr) {
    
  } else {
    
  }
  job_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), job_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pathloss.req_job_t.job_id)
}

// string time_str = 2;
inline void req_job_t::clear_time_str() {
  time_str_.ClearToEmpty();
}
inline const std::string& req_job_t::time_str() const {
  // @@protoc_insertion_point(field_get:pathloss.req_job_t.time_str)
  return _internal_time_str();
}
inline void req_job_t::set_time_str(const std::string& value) {
  _internal_set_time_str(value);
  // @@protoc_insertion_point(field_set:pathloss.req_job_t.time_str)
}
inline std::string* req_job_t::mutable_time_str() {
  // @@protoc_insertion_point(field_mutable:pathloss.req_job_t.time_str)
  return _internal_mutable_time_str();
}
inline const std::string& req_job_t::_internal_time_str() const {
  return time_str_.Get();
}
inline void req_job_t::_internal_set_time_str(const std::string& value) {
  
  time_str_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void req_job_t::set_time_str(std::string&& value) {
  
  time_str_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pathloss.req_job_t.time_str)
}
inline void req_job_t::set_time_str(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  time_str_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:pathloss.req_job_t.time_str)
}
inline void req_job_t::set_time_str(const char* value,
    size_t size) {
  
  time_str_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pathloss.req_job_t.time_str)
}
inline std::string* req_job_t::_internal_mutable_time_str() {
  
  return time_str_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* req_job_t::release_time_str() {
  // @@protoc_insertion_point(field_release:pathloss.req_job_t.time_str)
  return time_str_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void req_job_t::set_allocated_time_str(std::string* time_str) {
  if (time_str != nullptr) {
    
  } else {
    
  }
  time_str_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), time_str,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pathloss.req_job_t.time_str)
}

// repeated .pathloss.req_job_t.link_info_t links = 3;
inline int req_job_t::_internal_links_size() const {
  return links_.size();
}
inline int req_job_t::links_size() const {
  return _internal_links_size();
}
inline void req_job_t::clear_links() {
  links_.Clear();
}
inline ::pathloss::req_job_t_link_info_t* req_job_t::mutable_links(int index) {
  // @@protoc_insertion_point(field_mutable:pathloss.req_job_t.links)
  return links_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pathloss::req_job_t_link_info_t >*
req_job_t::mutable_links() {
  // @@protoc_insertion_point(field_mutable_list:pathloss.req_job_t.links)
  return &links_;
}
inline const ::pathloss::req_job_t_link_info_t& req_job_t::_internal_links(int index) const {
  return links_.Get(index);
}
inline const ::pathloss::req_job_t_link_info_t& req_job_t::links(int index) const {
  // @@protoc_insertion_point(field_get:pathloss.req_job_t.links)
  return _internal_links(index);
}
inline ::pathloss::req_job_t_link_info_t* req_job_t::_internal_add_links() {
  return links_.Add();
}
inline ::pathloss::req_job_t_link_info_t* req_job_t::add_links() {
  // @@protoc_insertion_point(field_add:pathloss.req_job_t.links)
  return _internal_add_links();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pathloss::req_job_t_link_info_t >&
req_job_t::links() const {
  // @@protoc_insertion_point(field_list:pathloss.req_job_t.links)
  return links_;
}

// -------------------------------------------------------------------

// job_result_t_link_result_t

// int32 link_idx = 1;
inline void job_result_t_link_result_t::clear_link_idx() {
  link_idx_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 job_result_t_link_result_t::_internal_link_idx() const {
  return link_idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 job_result_t_link_result_t::link_idx() const {
  // @@protoc_insertion_point(field_get:pathloss.job_result_t.link_result_t.link_idx)
  return _internal_link_idx();
}
inline void job_result_t_link_result_t::_internal_set_link_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  link_idx_ = value;
}
inline void job_result_t_link_result_t::set_link_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_link_idx(value);
  // @@protoc_insertion_point(field_set:pathloss.job_result_t.link_result_t.link_idx)
}

// double loss_db = 2;
inline void job_result_t_link_result_t::clear_loss_db() {
  loss_db_ = 0;
}
inline double job_result_t_link_result_t::_internal_loss_db() const {
  return loss_db_;
}
inline double job_result_t_link_result_t::loss_db() const {
  // @@protoc_insertion_point(field_get:pathloss.job_result_t.link_result_t.loss_db)
  return _internal_loss_db();
}
inline void job_result_t_link_result_t::_internal_set_loss_db(double value) {
  
  loss_db_ = value;
}
inline void job_result_t_link_result_t::set_loss_db(double value) {
  _internal_set_loss_db(value);
  // @@protoc_insertion_point(field_set:pathloss.job_result_t.link_result_t.loss_db)
}

// -------------------------------------------------------------------

// job_result_t

// string job_id = 1;
inline void job_result_t::clear_job_id() {
  job_id_.ClearToEmpty();
}
inline const std::string& job_result_t::job_id() const {
  // @@protoc_insertion_point(field_get:pathloss.job_result_t.job_id)
  return _internal_job_id();
}
inline void job_result_t::set_job_id(const std::string& value) {
  _internal_set_job_id(value);
  // @@protoc_insertion_point(field_set:pathloss.job_result_t.job_id)
}
inline std::string* job_result_t::mutable_job_id() {
  // @@protoc_insertion_point(field_mutable:pathloss.job_result_t.job_id)
  return _internal_mutable_job_id();
}
inline const std::string& job_result_t::_internal_job_id() const {
  return job_id_.Get();
}
inline void job_result_t::_internal_set_job_id(const std::string& value) {
  
  job_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void job_result_t::set_job_id(std::string&& value) {
  
  job_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pathloss.job_result_t.job_id)
}
inline void job_result_t::set_job_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  job_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:pathloss.job_result_t.job_id)
}
inline void job_result_t::set_job_id(const char* value,
    size_t size) {
  
  job_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pathloss.job_result_t.job_id)
}
inline std::string* job_result_t::_internal_mutable_job_id() {
  
  return job_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* job_result_t::release_job_id() {
  // @@protoc_insertion_point(field_release:pathloss.job_result_t.job_id)
  return job_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void job_result_t::set_allocated_job_id(std::string* job_id) {
  if (job_id != nullptr) {
    
  } else {
    
  }
  job_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), job_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pathloss.job_result_t.job_id)
}

// repeated .pathloss.job_result_t.link_result_t link_results = 2;
inline int job_result_t::_internal_link_results_size() const {
  return link_results_.size();
}
inline int job_result_t::link_results_size() const {
  return _internal_link_results_size();
}
inline void job_result_t::clear_link_results() {
  link_results_.Clear();
}
inline ::pathloss::job_result_t_link_result_t* job_result_t::mutable_link_results(int index) {
  // @@protoc_insertion_point(field_mutable:pathloss.job_result_t.link_results)
  return link_results_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pathloss::job_result_t_link_result_t >*
job_result_t::mutable_link_results() {
  // @@protoc_insertion_point(field_mutable_list:pathloss.job_result_t.link_results)
  return &link_results_;
}
inline const ::pathloss::job_result_t_link_result_t& job_result_t::_internal_link_results(int index) const {
  return link_results_.Get(index);
}
inline const ::pathloss::job_result_t_link_result_t& job_result_t::link_results(int index) const {
  // @@protoc_insertion_point(field_get:pathloss.job_result_t.link_results)
  return _internal_link_results(index);
}
inline ::pathloss::job_result_t_link_result_t* job_result_t::_internal_add_link_results() {
  return link_results_.Add();
}
inline ::pathloss::job_result_t_link_result_t* job_result_t::add_link_results() {
  // @@protoc_insertion_point(field_add:pathloss.job_result_t.link_results)
  return _internal_add_link_results();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pathloss::job_result_t_link_result_t >&
job_result_t::link_results() const {
  // @@protoc_insertion_point(field_list:pathloss.job_result_t.link_results)
  return link_results_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pathloss

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_pathloss_2eproto
